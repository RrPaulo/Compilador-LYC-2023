Terminals unused in grammar

   COMILLA
   .


Gramática

    0 $accept: start $end

    1 start: programa

    2 programa: sentencia
    3         | programa sentencia

    4 sentencia: asignacion
    5          | declaracion
    6          | read
    7          | write
    8          | ciclo
    9          | if

   10 $@1: /* vacío */

   11 asignacion: ID $@1 OP_AS expresion

   12 declaracion: INIT LA lista_declaracion LC

   13 lista_declaracion: lista_declaracion lista_id DOS_PUNTOS tipo
   14                  | lista_id DOS_PUNTOS tipo

   15 lista_id: lista_id COMA ID
   16         | ID

   17 tipo: INT
   18     | FLOAT
   19     | STRING

   20 read: READ PA ID PC

   21 $@2: /* vacío */

   22 write: WRITE PA ID $@2 PC

   23 $@3: /* vacío */

   24 write: WRITE PA CONST_STRING $@3 PC

   25 $@4: /* vacío */

   26 ciclo: CICLO $@4 PA condicion PC LA programa LC

   27 if: IF ETQ PA condicion PC LA programa LC
   28   | IF ETQ PA condicion PC LA programa FT ELSE LA programa LC

   29 ETQ: /* vacío */

   30 FT: LC

   31 condicion: comparacion
   32          | condicion AND comparacion
   33          | condicion OR comparacion
   34          | NOT comparacion

   35 comparacion: expresion comparador expresion

   36 comparador: OP_MEN
   37           | OP_MAY
   38           | OP_COMP
   39           | OP_MEN_IGU
   40           | OP_MAY_IGU

   41 expresion: termino
   42          | expresion OP_SUM termino
   43          | expresion OP_RES termino

   44 termino: factor
   45        | termino OP_MUL factor
   46        | termino OP_DIV factor

   47 factor: ID
   48       | CTE
   49       | CONST_REAL
   50       | CONST_STRING
   51       | PA expresion PC
   52       | fibonacci

   53 $@5: /* vacío */

   54 fibonacci: FIB PA CTE $@5 PC
   55          | FIB PA ID PC


Terminales con las reglas donde aparecen

$end (0) 0
error (256)
CTE (258) 48 54
ID (259) 11 15 16 20 22 47 55
OP_AS (260) 11
OP_SUM (261) 42
OP_MUL (262) 45
OP_RES (263) 43
OP_DIV (264) 46
PA (265) 20 22 24 26 27 28 51 54 55
PC (266) 20 22 24 26 27 28 51 54 55
CONST_REAL (267) 49
CONST_STRING (268) 24 50
LA (269) 12 26 27 28
LC (270) 12 26 27 28 30
DOS_PUNTOS (271) 13 14
COMA (272) 15
CICLO (273) 26
IF (274) 27 28
ELSE (275) 28
INT (276) 17
FLOAT (277) 18
STRING (278) 19
INIT (279) 12
READ (280) 20
WRITE (281) 22 24
AND (282) 32
OR (283) 33
NOT (284) 34
OP_MEN (285) 36
OP_MAY (286) 37
OP_COMP (287) 38
OP_MEN_IGU (288) 39
OP_MAY_IGU (289) 40
FIB (290) 54 55
COMILLA (291)
. (292)


No terminales con las reglas donde aparecen

$accept (38)
    en la izquierda: 0
start (39)
    en la izquierda: 1, en la derecha: 0
programa (40)
    en la izquierda: 2 3, en la derecha: 1 3 26 27 28
sentencia (41)
    en la izquierda: 4 5 6 7 8 9, en la derecha: 2 3
asignacion (42)
    en la izquierda: 11, en la derecha: 4
$@1 (43)
    en la izquierda: 10, en la derecha: 11
declaracion (44)
    en la izquierda: 12, en la derecha: 5
lista_declaracion (45)
    en la izquierda: 13 14, en la derecha: 12 13
lista_id (46)
    en la izquierda: 15 16, en la derecha: 13 14 15
tipo (47)
    en la izquierda: 17 18 19, en la derecha: 13 14
read (48)
    en la izquierda: 20, en la derecha: 6
write (49)
    en la izquierda: 22 24, en la derecha: 7
$@2 (50)
    en la izquierda: 21, en la derecha: 22
$@3 (51)
    en la izquierda: 23, en la derecha: 24
ciclo (52)
    en la izquierda: 26, en la derecha: 8
$@4 (53)
    en la izquierda: 25, en la derecha: 26
if (54)
    en la izquierda: 27 28, en la derecha: 9
ETQ (55)
    en la izquierda: 29, en la derecha: 27 28
FT (56)
    en la izquierda: 30, en la derecha: 28
condicion (57)
    en la izquierda: 31 32 33 34, en la derecha: 26 27 28 32 33
comparacion (58)
    en la izquierda: 35, en la derecha: 31 32 33 34
comparador (59)
    en la izquierda: 36 37 38 39 40, en la derecha: 35
expresion (60)
    en la izquierda: 41 42 43, en la derecha: 11 35 42 43 51
termino (61)
    en la izquierda: 44 45 46, en la derecha: 41 42 43 45 46
factor (62)
    en la izquierda: 47 48 49 50 51 52, en la derecha: 44 45 46
fibonacci (63)
    en la izquierda: 54 55, en la derecha: 52
$@5 (64)
    en la izquierda: 53, en la derecha: 54


estado 0

    0 $accept: . start $end

    ID     desplazar e ir al estado 1
    CICLO  desplazar e ir al estado 2
    IF     desplazar e ir al estado 3
    INIT   desplazar e ir al estado 4
    READ   desplazar e ir al estado 5
    WRITE  desplazar e ir al estado 6

    start        ir al estado 7
    programa     ir al estado 8
    sentencia    ir al estado 9
    asignacion   ir al estado 10
    declaracion  ir al estado 11
    read         ir al estado 12
    write        ir al estado 13
    ciclo        ir al estado 14
    if           ir al estado 15


estado 1

   11 asignacion: ID . $@1 OP_AS expresion

    $default  reduce usando la regla 10 ($@1)

    $@1  ir al estado 16


estado 2

   26 ciclo: CICLO . $@4 PA condicion PC LA programa LC

    $default  reduce usando la regla 25 ($@4)

    $@4  ir al estado 17


estado 3

   27 if: IF . ETQ PA condicion PC LA programa LC
   28   | IF . ETQ PA condicion PC LA programa FT ELSE LA programa LC

    $default  reduce usando la regla 29 (ETQ)

    ETQ  ir al estado 18


estado 4

   12 declaracion: INIT . LA lista_declaracion LC

    LA  desplazar e ir al estado 19


estado 5

   20 read: READ . PA ID PC

    PA  desplazar e ir al estado 20


estado 6

   22 write: WRITE . PA ID $@2 PC
   24      | WRITE . PA CONST_STRING $@3 PC

    PA  desplazar e ir al estado 21


estado 7

    0 $accept: start . $end

    $end  desplazar e ir al estado 22


estado 8

    1 start: programa .
    3 programa: programa . sentencia

    ID     desplazar e ir al estado 1
    CICLO  desplazar e ir al estado 2
    IF     desplazar e ir al estado 3
    INIT   desplazar e ir al estado 4
    READ   desplazar e ir al estado 5
    WRITE  desplazar e ir al estado 6

    $default  reduce usando la regla 1 (start)

    sentencia    ir al estado 23
    asignacion   ir al estado 10
    declaracion  ir al estado 11
    read         ir al estado 12
    write        ir al estado 13
    ciclo        ir al estado 14
    if           ir al estado 15


estado 9

    2 programa: sentencia .

    $default  reduce usando la regla 2 (programa)


estado 10

    4 sentencia: asignacion .

    $default  reduce usando la regla 4 (sentencia)


estado 11

    5 sentencia: declaracion .

    $default  reduce usando la regla 5 (sentencia)


estado 12

    6 sentencia: read .

    $default  reduce usando la regla 6 (sentencia)


estado 13

    7 sentencia: write .

    $default  reduce usando la regla 7 (sentencia)


estado 14

    8 sentencia: ciclo .

    $default  reduce usando la regla 8 (sentencia)


estado 15

    9 sentencia: if .

    $default  reduce usando la regla 9 (sentencia)


estado 16

   11 asignacion: ID $@1 . OP_AS expresion

    OP_AS  desplazar e ir al estado 24


estado 17

   26 ciclo: CICLO $@4 . PA condicion PC LA programa LC

    PA  desplazar e ir al estado 25


estado 18

   27 if: IF ETQ . PA condicion PC LA programa LC
   28   | IF ETQ . PA condicion PC LA programa FT ELSE LA programa LC

    PA  desplazar e ir al estado 26


estado 19

   12 declaracion: INIT LA . lista_declaracion LC

    ID  desplazar e ir al estado 27

    lista_declaracion  ir al estado 28
    lista_id           ir al estado 29


estado 20

   20 read: READ PA . ID PC

    ID  desplazar e ir al estado 30


estado 21

   22 write: WRITE PA . ID $@2 PC
   24      | WRITE PA . CONST_STRING $@3 PC

    ID            desplazar e ir al estado 31
    CONST_STRING  desplazar e ir al estado 32


estado 22

    0 $accept: start $end .

    $default  aceptar


estado 23

    3 programa: programa sentencia .

    $default  reduce usando la regla 3 (programa)


estado 24

   11 asignacion: ID $@1 OP_AS . expresion

    CTE           desplazar e ir al estado 33
    ID            desplazar e ir al estado 34
    PA            desplazar e ir al estado 35
    CONST_REAL    desplazar e ir al estado 36
    CONST_STRING  desplazar e ir al estado 37
    FIB           desplazar e ir al estado 38

    expresion  ir al estado 39
    termino    ir al estado 40
    factor     ir al estado 41
    fibonacci  ir al estado 42


estado 25

   26 ciclo: CICLO $@4 PA . condicion PC LA programa LC

    CTE           desplazar e ir al estado 33
    ID            desplazar e ir al estado 34
    PA            desplazar e ir al estado 35
    CONST_REAL    desplazar e ir al estado 36
    CONST_STRING  desplazar e ir al estado 37
    NOT           desplazar e ir al estado 43
    FIB           desplazar e ir al estado 38

    condicion    ir al estado 44
    comparacion  ir al estado 45
    expresion    ir al estado 46
    termino      ir al estado 40
    factor       ir al estado 41
    fibonacci    ir al estado 42


estado 26

   27 if: IF ETQ PA . condicion PC LA programa LC
   28   | IF ETQ PA . condicion PC LA programa FT ELSE LA programa LC

    CTE           desplazar e ir al estado 33
    ID            desplazar e ir al estado 34
    PA            desplazar e ir al estado 35
    CONST_REAL    desplazar e ir al estado 36
    CONST_STRING  desplazar e ir al estado 37
    NOT           desplazar e ir al estado 43
    FIB           desplazar e ir al estado 38

    condicion    ir al estado 47
    comparacion  ir al estado 45
    expresion    ir al estado 46
    termino      ir al estado 40
    factor       ir al estado 41
    fibonacci    ir al estado 42


estado 27

   16 lista_id: ID .

    $default  reduce usando la regla 16 (lista_id)


estado 28

   12 declaracion: INIT LA lista_declaracion . LC
   13 lista_declaracion: lista_declaracion . lista_id DOS_PUNTOS tipo

    ID  desplazar e ir al estado 27
    LC  desplazar e ir al estado 48

    lista_id  ir al estado 49


estado 29

   14 lista_declaracion: lista_id . DOS_PUNTOS tipo
   15 lista_id: lista_id . COMA ID

    DOS_PUNTOS  desplazar e ir al estado 50
    COMA        desplazar e ir al estado 51


estado 30

   20 read: READ PA ID . PC

    PC  desplazar e ir al estado 52


estado 31

   22 write: WRITE PA ID . $@2 PC

    $default  reduce usando la regla 21 ($@2)

    $@2  ir al estado 53


estado 32

   24 write: WRITE PA CONST_STRING . $@3 PC

    $default  reduce usando la regla 23 ($@3)

    $@3  ir al estado 54


estado 33

   48 factor: CTE .

    $default  reduce usando la regla 48 (factor)


estado 34

   47 factor: ID .

    $default  reduce usando la regla 47 (factor)


estado 35

   51 factor: PA . expresion PC

    CTE           desplazar e ir al estado 33
    ID            desplazar e ir al estado 34
    PA            desplazar e ir al estado 35
    CONST_REAL    desplazar e ir al estado 36
    CONST_STRING  desplazar e ir al estado 37
    FIB           desplazar e ir al estado 38

    expresion  ir al estado 55
    termino    ir al estado 40
    factor     ir al estado 41
    fibonacci  ir al estado 42


estado 36

   49 factor: CONST_REAL .

    $default  reduce usando la regla 49 (factor)


estado 37

   50 factor: CONST_STRING .

    $default  reduce usando la regla 50 (factor)


estado 38

   54 fibonacci: FIB . PA CTE $@5 PC
   55          | FIB . PA ID PC

    PA  desplazar e ir al estado 56


estado 39

   11 asignacion: ID $@1 OP_AS expresion .
   42 expresion: expresion . OP_SUM termino
   43          | expresion . OP_RES termino

    OP_SUM  desplazar e ir al estado 57
    OP_RES  desplazar e ir al estado 58

    $default  reduce usando la regla 11 (asignacion)


estado 40

   41 expresion: termino .
   45 termino: termino . OP_MUL factor
   46        | termino . OP_DIV factor

    OP_MUL  desplazar e ir al estado 59
    OP_DIV  desplazar e ir al estado 60

    $default  reduce usando la regla 41 (expresion)


estado 41

   44 termino: factor .

    $default  reduce usando la regla 44 (termino)


estado 42

   52 factor: fibonacci .

    $default  reduce usando la regla 52 (factor)


estado 43

   34 condicion: NOT . comparacion

    CTE           desplazar e ir al estado 33
    ID            desplazar e ir al estado 34
    PA            desplazar e ir al estado 35
    CONST_REAL    desplazar e ir al estado 36
    CONST_STRING  desplazar e ir al estado 37
    FIB           desplazar e ir al estado 38

    comparacion  ir al estado 61
    expresion    ir al estado 46
    termino      ir al estado 40
    factor       ir al estado 41
    fibonacci    ir al estado 42


estado 44

   26 ciclo: CICLO $@4 PA condicion . PC LA programa LC
   32 condicion: condicion . AND comparacion
   33          | condicion . OR comparacion

    PC   desplazar e ir al estado 62
    AND  desplazar e ir al estado 63
    OR   desplazar e ir al estado 64


estado 45

   31 condicion: comparacion .

    $default  reduce usando la regla 31 (condicion)


estado 46

   35 comparacion: expresion . comparador expresion
   42 expresion: expresion . OP_SUM termino
   43          | expresion . OP_RES termino

    OP_SUM      desplazar e ir al estado 57
    OP_RES      desplazar e ir al estado 58
    OP_MEN      desplazar e ir al estado 65
    OP_MAY      desplazar e ir al estado 66
    OP_COMP     desplazar e ir al estado 67
    OP_MEN_IGU  desplazar e ir al estado 68
    OP_MAY_IGU  desplazar e ir al estado 69

    comparador  ir al estado 70


estado 47

   27 if: IF ETQ PA condicion . PC LA programa LC
   28   | IF ETQ PA condicion . PC LA programa FT ELSE LA programa LC
   32 condicion: condicion . AND comparacion
   33          | condicion . OR comparacion

    PC   desplazar e ir al estado 71
    AND  desplazar e ir al estado 63
    OR   desplazar e ir al estado 64


estado 48

   12 declaracion: INIT LA lista_declaracion LC .

    $default  reduce usando la regla 12 (declaracion)


estado 49

   13 lista_declaracion: lista_declaracion lista_id . DOS_PUNTOS tipo
   15 lista_id: lista_id . COMA ID

    DOS_PUNTOS  desplazar e ir al estado 72
    COMA        desplazar e ir al estado 51


estado 50

   14 lista_declaracion: lista_id DOS_PUNTOS . tipo

    INT     desplazar e ir al estado 73
    FLOAT   desplazar e ir al estado 74
    STRING  desplazar e ir al estado 75

    tipo  ir al estado 76


estado 51

   15 lista_id: lista_id COMA . ID

    ID  desplazar e ir al estado 77


estado 52

   20 read: READ PA ID PC .

    $default  reduce usando la regla 20 (read)


estado 53

   22 write: WRITE PA ID $@2 . PC

    PC  desplazar e ir al estado 78


estado 54

   24 write: WRITE PA CONST_STRING $@3 . PC

    PC  desplazar e ir al estado 79


estado 55

   42 expresion: expresion . OP_SUM termino
   43          | expresion . OP_RES termino
   51 factor: PA expresion . PC

    OP_SUM  desplazar e ir al estado 57
    OP_RES  desplazar e ir al estado 58
    PC      desplazar e ir al estado 80


estado 56

   54 fibonacci: FIB PA . CTE $@5 PC
   55          | FIB PA . ID PC

    CTE  desplazar e ir al estado 81
    ID   desplazar e ir al estado 82


estado 57

   42 expresion: expresion OP_SUM . termino

    CTE           desplazar e ir al estado 33
    ID            desplazar e ir al estado 34
    PA            desplazar e ir al estado 35
    CONST_REAL    desplazar e ir al estado 36
    CONST_STRING  desplazar e ir al estado 37
    FIB           desplazar e ir al estado 38

    termino    ir al estado 83
    factor     ir al estado 41
    fibonacci  ir al estado 42


estado 58

   43 expresion: expresion OP_RES . termino

    CTE           desplazar e ir al estado 33
    ID            desplazar e ir al estado 34
    PA            desplazar e ir al estado 35
    CONST_REAL    desplazar e ir al estado 36
    CONST_STRING  desplazar e ir al estado 37
    FIB           desplazar e ir al estado 38

    termino    ir al estado 84
    factor     ir al estado 41
    fibonacci  ir al estado 42


estado 59

   45 termino: termino OP_MUL . factor

    CTE           desplazar e ir al estado 33
    ID            desplazar e ir al estado 34
    PA            desplazar e ir al estado 35
    CONST_REAL    desplazar e ir al estado 36
    CONST_STRING  desplazar e ir al estado 37
    FIB           desplazar e ir al estado 38

    factor     ir al estado 85
    fibonacci  ir al estado 42


estado 60

   46 termino: termino OP_DIV . factor

    CTE           desplazar e ir al estado 33
    ID            desplazar e ir al estado 34
    PA            desplazar e ir al estado 35
    CONST_REAL    desplazar e ir al estado 36
    CONST_STRING  desplazar e ir al estado 37
    FIB           desplazar e ir al estado 38

    factor     ir al estado 86
    fibonacci  ir al estado 42


estado 61

   34 condicion: NOT comparacion .

    $default  reduce usando la regla 34 (condicion)


estado 62

   26 ciclo: CICLO $@4 PA condicion PC . LA programa LC

    LA  desplazar e ir al estado 87


estado 63

   32 condicion: condicion AND . comparacion

    CTE           desplazar e ir al estado 33
    ID            desplazar e ir al estado 34
    PA            desplazar e ir al estado 35
    CONST_REAL    desplazar e ir al estado 36
    CONST_STRING  desplazar e ir al estado 37
    FIB           desplazar e ir al estado 38

    comparacion  ir al estado 88
    expresion    ir al estado 46
    termino      ir al estado 40
    factor       ir al estado 41
    fibonacci    ir al estado 42


estado 64

   33 condicion: condicion OR . comparacion

    CTE           desplazar e ir al estado 33
    ID            desplazar e ir al estado 34
    PA            desplazar e ir al estado 35
    CONST_REAL    desplazar e ir al estado 36
    CONST_STRING  desplazar e ir al estado 37
    FIB           desplazar e ir al estado 38

    comparacion  ir al estado 89
    expresion    ir al estado 46
    termino      ir al estado 40
    factor       ir al estado 41
    fibonacci    ir al estado 42


estado 65

   36 comparador: OP_MEN .

    $default  reduce usando la regla 36 (comparador)


estado 66

   37 comparador: OP_MAY .

    $default  reduce usando la regla 37 (comparador)


estado 67

   38 comparador: OP_COMP .

    $default  reduce usando la regla 38 (comparador)


estado 68

   39 comparador: OP_MEN_IGU .

    $default  reduce usando la regla 39 (comparador)


estado 69

   40 comparador: OP_MAY_IGU .

    $default  reduce usando la regla 40 (comparador)


estado 70

   35 comparacion: expresion comparador . expresion

    CTE           desplazar e ir al estado 33
    ID            desplazar e ir al estado 34
    PA            desplazar e ir al estado 35
    CONST_REAL    desplazar e ir al estado 36
    CONST_STRING  desplazar e ir al estado 37
    FIB           desplazar e ir al estado 38

    expresion  ir al estado 90
    termino    ir al estado 40
    factor     ir al estado 41
    fibonacci  ir al estado 42


estado 71

   27 if: IF ETQ PA condicion PC . LA programa LC
   28   | IF ETQ PA condicion PC . LA programa FT ELSE LA programa LC

    LA  desplazar e ir al estado 91


estado 72

   13 lista_declaracion: lista_declaracion lista_id DOS_PUNTOS . tipo

    INT     desplazar e ir al estado 73
    FLOAT   desplazar e ir al estado 74
    STRING  desplazar e ir al estado 75

    tipo  ir al estado 92


estado 73

   17 tipo: INT .

    $default  reduce usando la regla 17 (tipo)


estado 74

   18 tipo: FLOAT .

    $default  reduce usando la regla 18 (tipo)


estado 75

   19 tipo: STRING .

    $default  reduce usando la regla 19 (tipo)


estado 76

   14 lista_declaracion: lista_id DOS_PUNTOS tipo .

    $default  reduce usando la regla 14 (lista_declaracion)


estado 77

   15 lista_id: lista_id COMA ID .

    $default  reduce usando la regla 15 (lista_id)


estado 78

   22 write: WRITE PA ID $@2 PC .

    $default  reduce usando la regla 22 (write)


estado 79

   24 write: WRITE PA CONST_STRING $@3 PC .

    $default  reduce usando la regla 24 (write)


estado 80

   51 factor: PA expresion PC .

    $default  reduce usando la regla 51 (factor)


estado 81

   54 fibonacci: FIB PA CTE . $@5 PC

    $default  reduce usando la regla 53 ($@5)

    $@5  ir al estado 93


estado 82

   55 fibonacci: FIB PA ID . PC

    PC  desplazar e ir al estado 94


estado 83

   42 expresion: expresion OP_SUM termino .
   45 termino: termino . OP_MUL factor
   46        | termino . OP_DIV factor

    OP_MUL  desplazar e ir al estado 59
    OP_DIV  desplazar e ir al estado 60

    $default  reduce usando la regla 42 (expresion)


estado 84

   43 expresion: expresion OP_RES termino .
   45 termino: termino . OP_MUL factor
   46        | termino . OP_DIV factor

    OP_MUL  desplazar e ir al estado 59
    OP_DIV  desplazar e ir al estado 60

    $default  reduce usando la regla 43 (expresion)


estado 85

   45 termino: termino OP_MUL factor .

    $default  reduce usando la regla 45 (termino)


estado 86

   46 termino: termino OP_DIV factor .

    $default  reduce usando la regla 46 (termino)


estado 87

   26 ciclo: CICLO $@4 PA condicion PC LA . programa LC

    ID     desplazar e ir al estado 1
    CICLO  desplazar e ir al estado 2
    IF     desplazar e ir al estado 3
    INIT   desplazar e ir al estado 4
    READ   desplazar e ir al estado 5
    WRITE  desplazar e ir al estado 6

    programa     ir al estado 95
    sentencia    ir al estado 9
    asignacion   ir al estado 10
    declaracion  ir al estado 11
    read         ir al estado 12
    write        ir al estado 13
    ciclo        ir al estado 14
    if           ir al estado 15


estado 88

   32 condicion: condicion AND comparacion .

    $default  reduce usando la regla 32 (condicion)


estado 89

   33 condicion: condicion OR comparacion .

    $default  reduce usando la regla 33 (condicion)


estado 90

   35 comparacion: expresion comparador expresion .
   42 expresion: expresion . OP_SUM termino
   43          | expresion . OP_RES termino

    OP_SUM  desplazar e ir al estado 57
    OP_RES  desplazar e ir al estado 58

    $default  reduce usando la regla 35 (comparacion)


estado 91

   27 if: IF ETQ PA condicion PC LA . programa LC
   28   | IF ETQ PA condicion PC LA . programa FT ELSE LA programa LC

    ID     desplazar e ir al estado 1
    CICLO  desplazar e ir al estado 2
    IF     desplazar e ir al estado 3
    INIT   desplazar e ir al estado 4
    READ   desplazar e ir al estado 5
    WRITE  desplazar e ir al estado 6

    programa     ir al estado 96
    sentencia    ir al estado 9
    asignacion   ir al estado 10
    declaracion  ir al estado 11
    read         ir al estado 12
    write        ir al estado 13
    ciclo        ir al estado 14
    if           ir al estado 15


estado 92

   13 lista_declaracion: lista_declaracion lista_id DOS_PUNTOS tipo .

    $default  reduce usando la regla 13 (lista_declaracion)


estado 93

   54 fibonacci: FIB PA CTE $@5 . PC

    PC  desplazar e ir al estado 97


estado 94

   55 fibonacci: FIB PA ID PC .

    $default  reduce usando la regla 55 (fibonacci)


estado 95

    3 programa: programa . sentencia
   26 ciclo: CICLO $@4 PA condicion PC LA programa . LC

    ID     desplazar e ir al estado 1
    LC     desplazar e ir al estado 98
    CICLO  desplazar e ir al estado 2
    IF     desplazar e ir al estado 3
    INIT   desplazar e ir al estado 4
    READ   desplazar e ir al estado 5
    WRITE  desplazar e ir al estado 6

    sentencia    ir al estado 23
    asignacion   ir al estado 10
    declaracion  ir al estado 11
    read         ir al estado 12
    write        ir al estado 13
    ciclo        ir al estado 14
    if           ir al estado 15


estado 96

    3 programa: programa . sentencia
   27 if: IF ETQ PA condicion PC LA programa . LC
   28   | IF ETQ PA condicion PC LA programa . FT ELSE LA programa LC

    ID     desplazar e ir al estado 1
    LC     desplazar e ir al estado 99
    CICLO  desplazar e ir al estado 2
    IF     desplazar e ir al estado 3
    INIT   desplazar e ir al estado 4
    READ   desplazar e ir al estado 5
    WRITE  desplazar e ir al estado 6

    sentencia    ir al estado 23
    asignacion   ir al estado 10
    declaracion  ir al estado 11
    read         ir al estado 12
    write        ir al estado 13
    ciclo        ir al estado 14
    if           ir al estado 15
    FT           ir al estado 100


estado 97

   54 fibonacci: FIB PA CTE $@5 PC .

    $default  reduce usando la regla 54 (fibonacci)


estado 98

   26 ciclo: CICLO $@4 PA condicion PC LA programa LC .

    $default  reduce usando la regla 26 (ciclo)


estado 99

   27 if: IF ETQ PA condicion PC LA programa LC .
   30 FT: LC .

    ELSE      reduce usando la regla 30 (FT)
    $default  reduce usando la regla 27 (if)


estado 100

   28 if: IF ETQ PA condicion PC LA programa FT . ELSE LA programa LC

    ELSE  desplazar e ir al estado 101


estado 101

   28 if: IF ETQ PA condicion PC LA programa FT ELSE . LA programa LC

    LA  desplazar e ir al estado 102


estado 102

   28 if: IF ETQ PA condicion PC LA programa FT ELSE LA . programa LC

    ID     desplazar e ir al estado 1
    CICLO  desplazar e ir al estado 2
    IF     desplazar e ir al estado 3
    INIT   desplazar e ir al estado 4
    READ   desplazar e ir al estado 5
    WRITE  desplazar e ir al estado 6

    programa     ir al estado 103
    sentencia    ir al estado 9
    asignacion   ir al estado 10
    declaracion  ir al estado 11
    read         ir al estado 12
    write        ir al estado 13
    ciclo        ir al estado 14
    if           ir al estado 15


estado 103

    3 programa: programa . sentencia
   28 if: IF ETQ PA condicion PC LA programa FT ELSE LA programa . LC

    ID     desplazar e ir al estado 1
    LC     desplazar e ir al estado 104
    CICLO  desplazar e ir al estado 2
    IF     desplazar e ir al estado 3
    INIT   desplazar e ir al estado 4
    READ   desplazar e ir al estado 5
    WRITE  desplazar e ir al estado 6

    sentencia    ir al estado 23
    asignacion   ir al estado 10
    declaracion  ir al estado 11
    read         ir al estado 12
    write        ir al estado 13
    ciclo        ir al estado 14
    if           ir al estado 15


estado 104

   28 if: IF ETQ PA condicion PC LA programa FT ELSE LA programa LC .

    $default  reduce usando la regla 28 (if)
